#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Django settings for viking project.

Generated by 'django-admin startproject' using Django 1.11.7.dev20171022010352.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

import os

from django.utils.translation import ugettext_lazy as _
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$#v_d8w8bvfliz*kn6f(os^*5injb#pnc@pr9&pbbv(+78v@9('

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False # True
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'manage.apps.ManageConfig',
    'cmdb.apps.CmdbConfig',
    'wiki.apps.WikiConfig',
    'django.contrib.admin', # The admin site. You’ll use it shortly.
    'django.contrib.auth', # An authentication system.
    'django.contrib.contenttypes', # A framework for content types.
    'django.contrib.sessions', #  A session framework.
    'django.contrib.messages', # A messaging framework.
    'django.contrib.staticfiles', # A framework for managing static files
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'viking.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # os.path.join(BASE_DIR, '_templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'viking.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        # Defaul is sqlite3
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # Mysql
        'ENGINE': 'django.db.backends.mysql',
        #'ENGINE': 'mysql.connector.django',
        'OPTIONS': {'charset': 'utf8mb4'},
        'NAME': 'vikings',
        'HOST': os.environ.get("viking_mysql_host"),
        'USER': os.environ.get("viking_mysql_user"),
        'PASSWORD': os.environ.get("viking_mysql_pwd"),
        'PORT': '3366',
    }
}


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/
LANGUAGES = (
    ('en-us', _('English')),
    ('zh-hans', _('Simplified Chinese')),
)

LANGUAGE_CODE = 'zh-hans' #'en-us'
# LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai' #'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, "static") # '/_static/'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# STATICFILES_STORAGE  = 'qiniustorage.backends.QiniuStaticStorage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # '/var/www/static/',
]

# File Manage

# DEFAULT_FILE_STORAGE= 'django.core.files.storage.FileSystemStorage'
DEFAULT_FILE_STORAGE = 'qiniustorage.backends.QiniuMediaStorage'
# MEDIA_ROOT = os.path.join(BASE_DIR, '_media')
MEDIA_ROOT = '/media/'
# MEDIA_URL = '/_media/'

# Qiniu Intro
# Ref: http://django-qiniu-storage.readthedocs.io/zh_CN/latest/
# qiniustorage.backends.QiniuStorage, 文件将存放在bucket的根目录下
# qiniustorage.backends.QiniuMediaStorage, 文件将存放在bucket/MEDIA_ROOT目录下
# qiniustorage.backends.QiniuStaticStorage, 文件将存放在bucket/STATIC_ROOT目录下
